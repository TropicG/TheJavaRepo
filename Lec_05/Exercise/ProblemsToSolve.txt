* 1ва задача (Пример за Bridge метод + обяснение какво се случва на ниво компилатор)
	
	Да се направи:
	- Създай един генеричен клас с един тип <T>, който да се казва Box с един private T value и един setter 
	- Създай един клас BoxOfInt, който наследява Box<Integer> и в него да има една private Integer value и да се override-не setter от суперкласа 
	- Да се създаде референция от супер клас към дете и да се извика този сетър + обяснение какво се случва на комилаторно ниво 
	
* 2ра задача (Пример за генеричен клас който неговия тип наследява Number)

	Да се направи:
	- Създай един Container клас с един параметризиран тип, които наследява Number (не е нужно дори да има състояние или поведение)
	- В този клас да има main функция и създай няколко обекта с типове, който са наследици на Number 
	- Направи обект с тип, който не е наследник на Number и виж защо няма да се компилира + обяснение 
	
* 3та задача 

	Да се направи:
	- Един клас Pair с типове <K, V>, който ще има ключ, стойност и сетъри и гетъри и стринг метода
	- Да се направи друг клас в същия файл, който да се казва Util и да има статичен метод areEquals, който има параметърни типове <K,V> и да приема два Pair<K,V>
	да ги сравнява по ключове и стойности 
	- Създай и в Pair класа един main метода, в който да създадеш няколко обекта от Pair и да отговориш на въпроса защо не можем да извикаме Util.areEquals за Pair обекти с различни параметри