* Накратко какво представляват Generics

	Generics е начин да пишеш клас или метод, който е гъвкат и може да работи с различни типове данни, без да се налага да се пренаписва всеки път.
	
	Ключови предимства на тези generics:
	- Преизползване на код: не се налага да пишеш един и същи метод многократно за различни типове данни 
	- Безопастност на типовете (Type Safety): Когато примерно се създаде List<String> компилатора вижда, че в този лист има само текст, и ако добавим число
	ще се получи грешка веднага.
	- По-добра производителност 
	
* Преди използването на Generics 

	Преди е било възможно да се направи списък, но без да се уточняват данните и това не е било проблем за компилатора, защото всичко е било Object
	Ако е бил добавен елемент от int, след като се извика .next компилатора е връщал Object и този Object не може да присвуи тази данна напримерно в Integer.
	Това е карало компилатора да прави грешка и да прекрати работата си.
	
	Естествено решение на това е било да се каства при всяко усвояване, но това е досадно да го правиш всеки път.
	Но нали представи си, че примерно в този лист бе указан тип се е добавил String и после е направен опит за кастване към Integer е това ще хвърли ClassCastException
	
	Generics решават следния проблем:
	- Програмистът изразява намерението си и казва на компилатора, че създава списък, който ще съдържа само числа 
	- Компилатора гарантира коректността, ако е казано че този списък, приема само числа, при опит за вкарване на нещо друго няма да се компилира проекта 
	
	Един вид с кода List<Integer> компилатора разбира, че това е лист, който приема само числа и нищо друго 
	
* Синтаксис за писане на Generics 

	List<E> това се чете "списък от Е"
	Това показва, че генерирания клас или интерфейс е просто "шаблон", който използваме заместители като <E> за бъдещи типове данни 