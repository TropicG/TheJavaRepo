* Задача 1 

	Да се напише HelloWorld 
	
* Задача 2 

	Условие на задача: Въведение в Java - String, StringBuilder и Масиви
Напишете Java програма в клас на име IntroToJava, която демонстрира основните операции и характеристики на класовете String, StringBuilder и работата с масиви в Java. Програмата трябва да има main метод, който последователно извиква три отделни статични метода, всеки от които изследва една от трите теми.

	Метода private static void exploreString(): 
	- Създайте два String литерала с еднакво съдържание (напр. "FMI"). Сравнете ги чрез оператора == и отпечатайте резултата, за да покажете, че сочат към един и същ обект в String pool-а.
	- Създайте трети String със същото съдържание, но използвайки конструктора new String("FMI").
	- Сравнете първия литерал с новия обект чрез == и чрез метода .equals() и отпечатайте резултатите, за да илюстрирате разликата между сравнение на референции и сравнение на съдържание.
	- Използвайте метода .intern() върху обекта, създаден с new, и сравнете резултата с първия литерал чрез ==.

	- Създайте String (напр. "Current year is ") и конкатенирайте (добавете) към него цяло число (напр. 2024).
	- Разделете получения низ на масив от думи, използвайки интервала като разделител (.split(" ")).
	- Отпечатайте масива директно (System.out.println(words)) и след това използвайте Arrays.toString(words), за да видите разликата и да го отпечатате в четим формат.

	- Вземете вторият символ от низ (напр. "Example") чрез метода .charAt().
	- Преобразувайте низа в масив от символи (char[]) чрез .toCharArray().
	- Итерирайте през масива от символи по два начина и отпечатайте всеки символ на нов ред: С класически for цикъл и индекс и с for-each цикъл.

	- Демонстрирайте три различни начина за преобразуване на масива от символи обратно в String и отпечатайте резултата от всеки, за да видите разликите: chars.toString(), String.valueOf(chars), Arrays.toString(chars)
	- Демонстрирайте работата на следните методи върху подходящи примери и отпечатайте резултатите: toLowerCase() и toUpperCase(), Обръщане на низ (може да използвате StringBuilder за това)
	replace(), substring(), contains(), startsWith(), endsWith(), indexOf(), length(), isEmpty(), isBlank(), equalsIgnoreCase()

	Метода private static void exploreStringBuilder():
	- Създайте StringBuilder.
	- С помощта на цикъл, който върти от 0 до 19, добавете към StringBuilder-a само нечетните числа, последвани от интервал (.append()).
	- Отпечатайте финалния резултат.

	- Създайте StringBuilder с думата "racecar".
	- Напишете логика, която проверява дали думата е палиндром, като използвате метода .reverse(). Внимание: Помислете как да направите проверката, без да променяте оригиналния StringBuilder обект.
	- Напишете като коментар как компилаторът на Java оптимизира конкатенацията на низове с оператора + (напр. "I" + "<3" + "Java"), като вътрешно използва StringBuilder.

	Метода private static void exploreArray:
	- Декларация и след това инициализация с размер (напр. int[] array = new int[5];).
	- Декларация и инициализация с начални стойности в един ред (напр. String[] stringArray = {"apple", "banana", "cherry"};).
	- Вземете дължината на масив чрез полето .length и я сравнете като синтаксис с метода .length() при String.

	- Инициализирайте двумерен масив (матрица) с фиксирани размери (напр. long[10][10]).
	- Инициализирайте "назъбен" (jagged) масив, като първо зададете само броя на редовете, а след това в цикъл инициализирате всеки вътрешен масив с различен размер.
	
	- Създайте масив от цели числа с разбъркани стойности.
	- Сортирайте го с Arrays.sort().
	- Създайте масив от низове и го сортирайте в обратен азбучен ред, използвайки Collections.reverseOrder().
	- Търсете елемент в сортирания масив от числа с Arrays.binarySearch().
	- Копирайте масива с Arrays.copyOf().
	- Сравнете оригиналния и копирания масив за равенство по съдържание с Arrays.equals().
	- Отпечатайте масив в четим формат с Arrays.toString().
	- Създайте два еднакви двумерни масива от символи (char[][]) и демонстрирайте сравнението им с Arrays.deepEquals().
	
* Задача 3 

	Напишете Java програма в клас SwitchExample, която демонстрира три различни начина за използване на switch оператора:
	- класическия switch с break
	- модерния switch израз (expression)
	- switch с разпознаване на типове (pattern matching).
	
	Да се създаде статичен метод oldSwitchFoodGrader (това е примера с класичексия switch), който:
	- Приема един параметър от тип String, наречен food
	- Връща резултат от тип String.
	- Използва класическия switch оператор (със case и break), за да оцени стойността на food.
	- Логиката трябва да е следната: Ако food е "PIZZA", методът трябва да върне "NICE!", Ако food е "RAMEN", методът трябва да върне "OOH FANCY!"., 