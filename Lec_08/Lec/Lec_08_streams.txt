* Java Stream API 

    Ламбда изразите, заедно с функционалните интерфейси, разширяват възможността на Java с елементи на функционалното програмиране 
    # Това означава, че ламбда изразите и функционалните интерфейси са основните инструменти, които позволяват на Java да използва концепции от функционалното програмирне

    Te позволяват предаването на поведение (функции) като параметри на библиотеки, оптимизирани за бързодействие при обработка на данни
    # Вече вместо да се подават само данни към метод, може и да му се подаде поведение, тоест какво да прави с тези данни 

    По този начин, един app developer може да се фокусира върху бизнес логиката на приложението си, оставяйки аспекти като бързодействието на авторите на въпросните библиотеки
    Една такава основна библиотека е java.util.stream

* java.util.streams 

    Интерфейсите и класовете от пакета java.util.stream (които наричаме Java Stream API) са предназначени за ефективна последователна или паралелна обработка на крайни или безкрайни потоци от данни
    Клочви характеристики:
    - Ефективна, защото е оптимизирана за бързодействие
    - Последователна или паралелна: Могат да се обработват данни елемент по елемент или Java автоматично да раздели работата на няколко нишки, за да изпозлва всички ядра на процесора
    - Крайни или безкрайни потоци: Може да се работи с колекции с краен брой или с безкраейн поток от данни, примерно всички четни числа

    Алгоритмите, работещи с данни във вид на потоци, се реализират като последователност (pipelines) от операции върху елементите на потока 
    # Вместо да се пишат for цикли или да се влагат if-cases, в Stream API-то се изгражда pipeline от операци
    # Данните влизат в единия край на Pipeline-a и преминават през всяка стъпка последователно 

* Инициализиране на поток от колекции, низове и масиви 

    Има много начини, по които може да инициализираме поток:
    - Stream.empty() 
    # 