* Принципи на частия код - именуване, конвенции и добри практики 

	Целта на тези неща е да направят кода по лесен за четене, разбиране и поддръжка за всеки програмист 
	
	Пакетите 
	Те се изписват само с малки букви като думите в йерархията се разделят с точки. Използва се обратният домайн на организацията
	Пример: bg.sofia.uni.fmi.mjt 
	
	Класове
	Имената са съществителни и почват с главна буква, като всяка следващата дума също започва с главна буква (UpperCamelCase)
	Пример: Student, GameBoard
	
	Интерфейси 
	Често имената за интерфейси са прилагателни и те завършват на "-able"
	Пример: Comparable, Runnable, Serializable 
	
	Методи 
	Имената са глаголи и започват с малк буква, докато всяка нова дума започва с главна буква
	Пример: reverseString(), calculateSalary()
	
	Променливи
	Имената на променливити са винаги съществителни и започват с малка буква, като не се използват долни черти 
	Пример: itemsCount
	
	Константи
	Имената на константите се използват изцяло с главни букви, а думите се разделят с долна черта 
	Пример: MAX_NAME_LENGTH
	
	Енкапсулация
	Да се скрие вътрешното състояние и сложноста на един обект, като се предостави прост и ясен публичен интерфейс
	Правилото тук е да се свеждат публичните части до минимум
	Винаги полетата на класа трябва да са private като доспътъ и промяната им трябва да стават чрез public методи, това защита цялостта на обекта.
	
	Наследяване
	Основната идея е да се създават нови класове на базата на вече съществуващи и като се преизползва код.
	Правилото тук е да не се допускат code duplications, тоест ако имаме два класа с обща функционалност е по-добре да извлечем общите части в един базов клас 
	Това улеснява много поддръжката, защото ако се направи някаква промяна тя ще е на едно място и лесно може да се ориентираме 
	
	Полиморфизъм 
	Един обект може да се представи в различни форми. Работи се с обекти през техния общ интерфейс без да се знае конкретната имплементация
	Правилото тук е да се използва интерфейс за декларацията и да се използва интерфейс в сигнатурите
	Това е дефакто фундаменталния принцип Програмирай към интерфейс а не към конкретна имплементация 
	
* Среми се към хубав ОО дизайн  

	Принципа за единствената отговорност (Single Responsibility Principle) гласи: "Един клас трябва да прави едно нещо" или "един метод трябва да прави едно нещо"
	Това е най-важния метод, защото това прави кода много по-лесен за разбиране. Има и следните индикатори за проблеми:
	- Ако име на клас/метод съдържа "and" това означава че класът/методъ прави няколко неща наведнъж и може да се разделят на отделни методи
	- Имена съдържащи Utility, Helper, Manager това са имена които се свързват с класове "торба", в който се трупат разновидни функции, несвързани помежду си, а това нарушава SingleResponsibilityPrinciple-a 
	
	Методите могат да имат и следните дизайн органичения:
	- Хубаво е един метод да има под 20 реда код, защото това подпомага на методите да останат фокусирани само върху 1 задача 
	- Органичявай се до 3-4 параметъра на метод, за да предотвратиш симпотом за проблем (code smell)
	
	Други хубави общи практики:
	- Използвай само по изключение пакета по подразбиране, тоест класовете винаги трябва да са преименувани в пакет
	- Да не се злоупотребява със static, защото прекомерното използване на static води до процедурно програмиране, а не ооп.
	
* Форматиране 

	Форматиране на кода се отнася до неговия визуален стил и подредба, като това включва:
	- Отместване: това е използването на интервали или табулации за структуриране на блоковете код 
	- Разстояния: това е поставяенето на разстояния около операторите =, +, - и след запетай
	- Стил на скобите
	- Дължина на редовете 
	
	Основната цел зад това е четимостта на кода, защото добре форматирания код е по-лесен за чтене и разбиране и поддръжка.
	
	Модерните IDE-та могат да направят форматирането автоматично с една комбинация за клавиатурата.
	За IntelliJ IDEA е Ctrl + Alt + L 
	
* Магическите числа 

	Избягвай магическите числа, като ги заменяш с някакви константи 
	
* Примерна функция как би трябвало да изглежда 

	private static long calculateSum (int n){
		long sumOfOddSquares = 0;
		
		for (int i = 0; i < n; i++) {
			if (i % 2 != 0) {
				sumOfOddSquares += Math.pow(i,2);
			}
		}
		
		return sumOfOddSquares;
	}
	
	Правилата, които бяха спазени при писане на тази функция:
	- да не се залепят if, while, do, for, switch веднага с последващте скоби 
	- да не се залетя до списъка с параметри на метод с {
	- да не се залепя оператора до операндите, тоест да не е като 1+2
	- да не се оставя място между името на метода и списъка му с параметри 
	- да се оставя интервал след , 
	- да се оставят от време на време празни редове 
	- да не се оставят никъде два или повече последователни празни редове 
	- Красивото обикновенно е симитрично 
	
* Още принчипи за чистият код 

	Хубаво е да се следват и следващите принципи:
	- Да се слагат коментари и да не се прекалява 
	- Да се разделя нормалната логика от exception логиката 
	- Да се използват изключения вместo error codes, изключенията просто са много по-добри от връщане на грешки чрез число или null стойности 
	
	
	
	