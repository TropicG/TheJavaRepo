* Кога да се тества?

	В различните фази на разработка на продукт, един дефект или бъг ще струва различно:
	- По време на дизайн, ако една грешка се открие тук, цената за поправка е минимална (условно 1)
	- По време на разработка, една грешка, за да се оправи, цената и ще бъде 6.5 пъти по-висока 
	- По време на тестването, ако се открие грешката, нейното управяне ще струва 15 пъти по-скъпо 
	- По време вече на поддръжка, ако дефектът е открит от клиент след пускане на продукт, оправянето му струва 100 пъти повече
	
	Тоест идеята да тестваме е възможно най-рано и по-често
	
* Тестване като процес vs тестване като фаза 

	Тестване като фаза 
	Това е старият, традиционен модел, тестването е просто една фаза от линейн процес, който идва след като разработката е приключила
	Проблема тук е че дефектите се откриват много късно, точно преди пускането на продукта и цената за тяхното управяне е изключително голямо
	
	Тестването като процес 
	Това вече е модерният и по-ефективен подход. Тук тестването не е поредата фаза, а е непрекъснат процес, който се случва паралелно с другите фази от разработка 
	Тестването почва още при валидирането на изискванията, планирането на тестове по време на дизайна и тестване на функционалностите веднага щом са готови, а дори и когато продукта влезе в подръжка
	Тук проблеми се решават много по-бързо и се виждат много по-рано, което спестява време и ресурси 
	
* Основни видове тестове 

	Някой от следните видове тестове са:
	- ръчни тестове: това са тестовете, при които човек (QA специалист) ръчно взаимойдества с приложението (натисна бутони, въвежда данни) и провервяа дали софтуера работи според очакванията
	
	- автоматични тестов: това са тестове, в които се използва специални инструменти и скриптове, които се извършват автоматично без човешка намеса, делят се на функционални и нефункционални
	Функционалните тестове проверят дали системата прави това, за което е създадена, тоест тези тестове се фокусират върху конкретните бизнес изисквания 
	Нефункционалните тестове проверяват как работи системата и се фокусират върху качества като производителност, сигурност и удобство и други 
	
* Функционални и нефункционални тестове 

	Функционалните тестове имат няколко вида:
	- Unit тестове (модулни тестове): тестват най-малките, изоличрани части от кода, примерно тестват една функция 
	- Integration тестове (Интеграционни тестове): проверяват дали различните модули работят коректно заедно, след като са били тествани отделно 
	
	Нефункционални тестове има няколко вида:
	- Performance тестове: измерват бързината и отзивчивостта на системата при нормално натоварване 
	- Stress тестове: системата се натоварва над нормалния и лимит, за да се видим къде е нейната точка на счупване и как се държи при екстремни условия 
	- Crash тестове: проверява се колко добре се възстановява системата след срив 
	- Security тестове: целта на този тест е да се открие уязвимоста и някой пробиви в сигурността, за да предпазят системата от хакерси атаки 
	- Usability тестове: Оценяват колко лесен, интуитивен и удобен е софтуерът за крайния потребител 
	
* Unit Test 

	Отново, най-просто казано unit test е код, който тества друг, малък и изолиран фрагмент от код 
	Unit теста изпълнява "атомарна" функционалсност, тоест теста се фокусира върху най-малката възможна логическа част от системата 
	Реално в практиката един "unit" тест е често един-единствен метод или функция като целта е да се види дали този метод работи правилно 
	
	Причини защо са важни unit тестовете:
	- Дават гаранция за коректност: това е доказателство, че кодът работи по точно същия начин по който се очаква 
	- Предпазна мрежа за бъдещето: unit теста веднага ще покажа, че нещо се е счупило, ако се прави някаква модификация в кода и тя случайно е счупило нещо 
	
* Малко дефиници относно тестовете 

	Продуктовия код е истинският код на приложението, това е кода, който върши работата, която потребителите виждат и използват 
	Test Coverage-a е процентът, който показва каква част от продуктовия код се проверява от автоматичните тестове. Високото покритие дава увереност, че повечето части на системата работят правилно.
	
	Test Driven Development-a е техника за програмиране, която първо се пише теста и след това кода, който да го удовлетворява
	Test Fixture е фиксираната начална среда или състояние, което е необходимо, за да може един тест да се изпълни, тогава кара тестава винаги да започва при едни и същи предвидими условия.
	
	
	
	